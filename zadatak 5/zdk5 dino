#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct _node {
	int data;
	struct _node* next;
} node;

node* InputList ();
int InsertAtHead (node**,node*);
int InsertAtLocation (node*, node*);
node* CreateNode ();
int DataInput (node*);
int SortNode (node**,node*);
int CompareNodes (node*, node*);
int SwitchNodes (node*, node*);
int PrintList (node*);

int main()
{
	node L1, L2;
	L1.next = NULL;
	L2.next = NULL;
	L1.next = InputList();
	L2.next = InputList();
	
	printf("\nPrva Lista:\n\n");
    PrintList(L1.next);
    
	printf("\nDruga Lista:\n\n");
	PrintList(L2.next);
	
	
	return 0;
}

node* InputList()
{
	int numberOfElements = 0, i = 0;

	node* head = NULL;

	printf("\nUnesi broj clanova: ");
	scanf("%d", &numberOfElements);
	for (i = 0; i < numberOfElements; i++)
	{
	    node* temp = CreateNode();
		SortNode(&head, temp);
	}
	return head;
}

int InsertAtHead(node** head, node* temp)
{
	if ((*head) == NULL)
	{
		(*head) = temp;
		return 1;
	}
	temp->next = (*head)->next;
	(*head)->next = temp;
	return 0;
}

int InsertAtLocation(node* location,node* temp)
{
    temp->next = location->next;
    location->next = temp;
}

node* CreateNode() 
{
	node* temp = (node*)malloc(sizeof(node));
	if (temp == NULL)
	{
		printf("\n\tError 124-6: Memory Allocation Error!\n");
		return NULL;
	}
	DataInput(temp);
	return temp;
}

int DataInput(node* temp)
{
    printf("\nUnesi clan: ");
	scanf("%d", &temp->data);
	temp->next = NULL;
	return 0;
}

int SortNode(node** head, node* temp)
{
    node* tempNode = *head;
    if((*head)==NULL)
    {
        InsertAtHead(head,temp);
        return 3;
    }
    while(tempNode!=NULL)
    {
        if(CompareNodes(temp,tempNode)==1)
        {
            tempNode=tempNode->next;
        }
        else if(CompareNodes(temp,tempNode)==0) return 2;
        else
        {
            InsertAtLocation(tempNode,temp);
            return 1;
        }
    }
    return 0;
}

int CompareNodes(node* node1, node* node2)
{
    if(node1->data > node2->data) return 1;
    else if(node1->data = node2->data) return 0;
    else return -1;
}

int SwitchNodes(node* node1, node* node2)
{
    int data = 0;
    data = node1->data;
    node1->data = node2->data;
    node2->data = data;
    return 0;
}

int PrintList(node* head)
{
    node* temp = head;
    while(temp != NULL)
    {
        printf("%d ",temp->data);
        temp = temp->next;
    }
    return 0;
}


