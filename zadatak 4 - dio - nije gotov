#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define ROW_MAX (128)

typedef struct _polynom
{
	int coefficient;
	int power;
}polynom;
typedef struct _node
{
	polynom data;
	struct _node* next;
}node;

int LoadPolynom(node*,node*);
int AddDataToNode(node*);
node* CreateNode();
int CreatePolynom(char*,node*);
int SwapNodes(node* , node*);
int CompareNodes(node*, node*);
int SortNumber(node*, node*);

int main()
{
	node HeadP1, HeadP2;
	HeadP1.next=NULL;
	HeadP2.next=NULL;
	
	LoadPolynom(HeadP1.next,HeadP2.next);
	printf(" AAA ");
	
	
	node* Temp = &HeadP1;
	while(Temp!=NULL){
	    printf("%d %d\n",Temp->data.coefficient,Temp->data.power);
	    Temp=Temp->next;
	}
	
/*	PrintBothPolynoms(&HeadP1, &HeadP2); */
	
	return 0;
}
node* CreateNode()
{
	node* Temp = (node*)malloc(sizeof(node));
	if(Temp == NULL)
	{
		printf("\n\tError 124-6: Memory Allocation Error!\n");
		return NULL;
	}
    else return Temp;
}

int CreatePolynom(char* row,node* head)
{
    node* NewNode=NULL;
    int i=0,length=0,NumberPosition=0;
    length=1+strlen(row);
    
    for(i=0;i<length/4;i++){
        NewNode=CreateNode();
        if(NewNode==NULL){
            printf("\n\tError 124-6.2: Polynom Not Fully Loaded!\n\tExiting The Function!\n");
            free(NewNode);break;
        }
        sscanf(row+NumberPosition,"%d %d",&NewNode->data.coefficient,&NewNode->data.power);
        NumberPosition+=4;
        SortNumber(head, NewNode);
    }
}

int LoadPolynom(node* HeadP1,node* HeadP2)
{
	FILE *ulz;

	char row[ROW_MAX];

	ulz = fopen("polinomi.txt","r");
	if(ulz == NULL)
	{
		printf("\n\tError 124-5: Document Error!\n");
		return -1;
	}

	fgets(row, ROW_MAX, ulz);
	CreatePolynom(row, HeadP1);
	fgets(row, ROW_MAX, ulz);
	CreatePolynom(row, HeadP2);

}

int SortNumber(node* head, node* SortNode)
{
    node* TempNode=head;
    if(head==NULL){
        SortNode->next=NULL;
        head=SortNode;
        return 1;
    }
    else{
        while(TempNode!=NULL){
            CompareNodes(TempNode,SortNode);
            TempNode=TempNode->next;
        }
        return 2;
    }
}

int CompareNodes(node* TempNode, node* SortNode)
{
    if (SortNode->data.power > TempNode->data.power)
    {
        SwapNodes(TempNode, SortNode);
        return 1;
    }
    return 0;
}

int SwapNodes(node* TempNode, node* SortNode)
{
    polynom Temp = TempNode->data;
    TempNode->data = SortNode->data;
    SortNode->data = Temp;
    return 0;
}

int PrintBothPolynoms(node* HeadP1, node* HeadP2)
{
    node* TempNode = HeadP1;
    int PolynomNumber=1;
    
    while(TempNode!=NULL)
    {
        printf("%dx^%d",TempNode->data.coefficient,TempNode->data.power);
        TempNode=TempNode->next;
        if(TempNode == NULL){
            printf("\n");
            if(PolynomNumber = 1){
                PolynomNumber = 2;
                TempNode=HeadP2;
            }
            continue;
        }
        puts(" + ");
    }
}

