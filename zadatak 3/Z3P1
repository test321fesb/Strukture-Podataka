#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX (32)
#define MAX_ROW (128)

typedef struct _osoba
{
	char ime[MAX];
	char prezime[MAX];
	int godiste;
} osoba;

typedef struct _node
{
	osoba podatci;
	struct _node* next;
} node;

int DodajPocetak(node*);
int DodajKraj(node*);
int DodajIza(node*);
int DodajIspred(node*);
int UnosPodataka(node*);
node* KreirajNode();
node* PronalaziPredhodnika(node*);
int PronalaziPrezime(node*);
int Ispis(node*);
int brisanje(node*);
int IspisiMenu();
int IspisiOsobu(node*);
int UpisUdat(node*);
int CitajDat();
int sortiranje(node*);
int zamijeni(node*, node*);
int provjeraZamjene(node*);

int main()
{
	node head;
	head.next= NULL;
	int input = -1;

	while (input != 0)
	{
		IspisiMenu();
		scanf("%d", &input);
		switch (input)
		{
		case 1:
			DodajPocetak(head.next);
			break;
		case 2:
			DodajKraj(&head);
			break;
		case 6:
			brisanje(&head);
			break;
		case 5:
			PronalaziPrezime(&head);
			break;
		case 8:
			Ispis(&head);
			break;
		case 3:
			DodajIza(&head);
			break;
		case 4:
			DodajIspred(&head);
			break;
		case 9:
		    UpisUdat(&head);
			break;
		case 10:
		    CitajDat();
		    break;
        case 7:
            sortiranje(&head);
            break;
		case 0:
			printf("\n\tGOODBYE\n");
			return 0;
		default:
			printf("\n--Pogresan unos!--\n");
		}
	}

	return 0;
}

int UnosPodataka(node* Temp)
{
	printf("---Unesi podatke---\n(ime prezime godiste): ");
	scanf("%s %s %d", Temp->podatci.ime, Temp->podatci.prezime, &Temp->podatci.godiste);
	Temp->next = NULL;
	return 0;
}

node* KreirajNode()
{
	node* TempNode = (node*)malloc(sizeof(node));
	if (TempNode) {
		UnosPodataka(TempNode);
		return TempNode;
	}
	else {
		printf("Problem s alokacijom.");
		return NULL;
	}
}

int DodajPocetak(node* head)
{
	node* TempNode = KreirajNode();
		printf("\na");
	TempNode->next = head->next;
		printf("\na");
	head->next = TempNode;
		printf("\na");
	return 0;
}

int DodajKraj(node* head)
{
	node* TempKraj = head;

	node* TempNode = KreirajNode();

	if (head == NULL) {
		head = TempNode;
		return 0;
	}

	while (TempKraj->next != NULL)
	{
		TempKraj = TempKraj->next;
	}

	TempKraj->next = TempNode;
	return 0;
}

int Ispis(node* head)
{
	node* TempIspis = head;

	puts("\n\t----------ISPIS-----------");

	while (TempIspis != NULL)
	{
		IspisiOsobu(TempIspis);
		TempIspis = TempIspis->next;
	}

	puts("\n\t--------------------------");

	return 0;
}


int PronalaziPrezime(node* head)
{
	node* TempNode = head;
	char TempPrez[MAX];

	printf("\nUnesi trazeno prezime: ");
	scanf("%s", TempPrez);

	while (TempNode != NULL)
	{
		if (strcmp(TempNode->podatci.prezime, TempPrez) == 0) {
			IspisiOsobu(TempNode);
			return 0;
		}
		TempNode = TempNode->next;
	}

	printf("Ne postoji trazena osoba. Unesite neku drugu.\n");
	return 0;
}

int brisanje(node* head)
{
	node* TempNode = head;
	node* TempNodePrev;
	char TempPrez[MAX];

	if (TempNode == NULL) {
		printf("Lista je prazna.\n");
		return 0;
	}

	printf("\n\t-----BRISANJE-----\n\n\t Unesi prezime osobe: ");
	scanf("%s", TempPrez);

	if (strcmp(TempNode->podatci.prezime, TempPrez) == 0)
	{
		head = TempNode->next;
		free(TempNode);
		return 0;
	}

	while (TempNode != NULL)
	{
		if (strcmp(TempNode->podatci.prezime, TempPrez) == 0) {
			TempNodePrev->next = TempNode->next;
			free(TempNode);
			return 0;
			printf("\n\tOsoba izbrisana\n");
		}

		TempNodePrev = TempNode;
		TempNode = TempNode->next;
	}

	printf("Ne postoji trazena osoba. Unesite neku drugu.\n");
	return 0;
}

int IspisiMenu()
{
	printf("\n--------------------");
	printf("\n------IZBORNIK------");
	printf("\n--------------------\n");
	printf(" 0 - Izlaz\n");
	printf(" 1 - Dodaj na pocetak\n");
	printf(" 2 - Dodaj na kraj\n");
	printf(" 3 - Dodaj Iza\n");
	printf(" 4 - Dodaj Ispred\n");
	printf(" 5 - Pronalazak\n");
	printf(" 6 - Brisanje osobe\n");
  printf(" 7 - Sortiraj po prezimenima\n");
	printf(" 8 - Ispis\n");
	printf(" 9 - Upis u datoteku\n");
  printf("10 - Iscitaj iz datoteke\n");
	printf("\nVas izbor: ");
}

int IspisiOsobu(node* Temp) {
	if (!Temp)
	{
		return -1;
	}
	printf("\n\t<%s %s %d>\n", Temp->podatci.ime, Temp->podatci.prezime, Temp->podatci.godiste);
	return 0;
}

int DodajIza(node* head)
{
	node* TempNode = head;
	node* Temp;
	char TempPrez[MAX];

	printf("\nUnesi trazeno prezime: ");
	scanf("%s", TempPrez);

	while (TempNode != NULL)
	{
		if (strcmp(TempNode->podatci.prezime, TempPrez) == 0) {

			Temp = KreirajNode();
			Temp->next = TempNode->next;
			TempNode->next = Temp;
			return 0;
		}
		TempNode = TempNode->next;
	}

	printf("Ne postoji trazena osoba. Unesite neku drugu.\n");
	return 0;
}

node* PronalaziPrethodnika(node* head)
{
    node* TempNode = head;
	node* TempNodePrev;
	char TempPrez[MAX];

	if (TempNode == NULL) {
		printf("Lista je prazna.\n");
		return 0;
	}

	printf("\nUnesi prezime trazene osobe: ");
	scanf("%s",TempPrez);

    if (strcmp(TempNode->podatci.prezime, TempPrez) == 0)
	{
		return NULL;
	}

    while (TempNode != NULL)
	{
		if (strcmp(TempNode->podatci.prezime, TempPrez) == 0) {
			return TempNodePrev;
		}
		TempNodePrev = TempNode;
		TempNode = TempNode->next;
	}
	printf("Ne postoji trazena osoba.\n");
	return 0;
}

int DodajIspred(node* head)
{
    node* TempNode;
    node* Temp;

    TempNode=PronalaziPrethodnika(head);

    if(TempNode==NULL)
    {
        DodajPocetak(head);
        return 0;
    }
    else
    {
        Temp = KreirajNode();
        Temp->next=TempNode->next;
        TempNode->next=Temp;
        return 0;
    }
    return 0;
}

int UpisUdat(node* head)
{
    node* TempNode=head;
    FILE *ulz;
    if(ulz == NULL)
    {
        printf("\n\tGreska u otvaranju datoteke\n");
        return 0;
    }
    
    /*ulz=fopen("osobe.txt","a");*/
    ulz=fopen("osobe.txt","w");

    while(TempNode!=NULL)
    {
        fprintf(ulz,"%s %s %d\n",TempNode->podatci.ime,TempNode->podatci.prezime,TempNode->podatci.godiste);
        TempNode=TempNode->next;
    }
    fclose(ulz);
    printf("\n\tOsobe upisane!\n");
    return 0;
}

int CitajDat()
{
    FILE *ilz;
    char row[MAX_ROW];

    if(ilz == NULL)
    {
        printf("\n\tGreska u otvaranju datoteke\n");
        return 0;
    }

    ilz = fopen("osobe.txt","r");

    while( fgets(row, 100, ilz) )
    {
        printf("%s",row);
    }
    fclose(ilz);
    return 0;
}

int sortiranje(node* head) {
  int zamijenjen = 1;
  node *temp;
  node *najveciTemp = NULL;

  if (head == NULL) {
      printf("Lista prazna.\n");
      return 1;
  }

  while (zamijenjen) {
    temp = head;
    zamijenjen = 0;

    while (temp->next != najveciTemp)
      {
          zamijenjen = provjeraZamjene(temp);
          temp = temp->next;
      }

      najveciTemp = temp;

  }

  printf("Lista je sortirana.\n");
  return 0;
}

int provjeraZamjene (node* temp) {
  if ( strcmp(temp->podatci.prezime, temp->next->podatci.prezime) > 0 )
  {
    zamijeni(temp, temp->next);
    return 1;
  }
  else {
    return 0;
  }
}

int zamijeni(node* a, node * b)
{
  osoba temp = a->podatci;
  a->podatci = b->podatci;
  b->podatci = temp;
}
