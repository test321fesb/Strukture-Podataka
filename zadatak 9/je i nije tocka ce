#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define buffer (64)

typedef struct _Node
{
	int data;
	struct _Node* left;
	struct _Node* right;
} Node;
typedef struct _Node* Position;

typedef struct _Main
{
	Position rootNode;
	Position current;
} Main;
typedef struct _Main* head;

Position CreateNode(int);
Position FindElement(Position, int);
int AddEl(Position);
int CreateEl(Position, int);
int Start(head);
int Menu();
int PrintStart(head);
int PrintTree(Position, int*);
int Find(head);
int Delete(head);
Position ReconnectBranch(Position, int);
Position FindLowestNumber(Position);


int main()
{
	Main root;

	Node node;
	node.left = NULL;
	node.right = NULL;
	node.data = 0;

	Queue red;
	red.next = NULL;

	root.queue = &red;
	root.rootNode = &node;

	Start(&root);

	return 0;
}

int Menu()
{
	printf("\n--------------------");
	printf("\n|-----IZBORNIK-----|");
	printf("\n--------------------\n");
	printf("\n 1 - Unesi Element");
	printf("\n 2 - Ispisi Stablo");
	printf("\n 3 - Pronadi clana");
	printf("\n 4 - Izbrisi clana");
	printf("\n 0 - Izlaz");
	printf("\n\n Vas odabir: ");
	return 0;
}

int Start(head root)
{
	int input = 1;
	do
	{
		Menu();
		scanf("%d", &input);
		switch (input)
		{
		case 1: AddEl(root->rootNode);
				break;
		case 2: PrintStart(root);
				break;
		case 3: Find(root);
				break;
		case 4: Delete(root);
				break;
		case 0: printf("\n\tBOK\n");
				break;
		default: break;
		}
	} while (input != 0);
	return 0;
}

Position CreateNode(int var)
{
	Position temp = (Position)malloc(sizeof(Node));
	if (!temp)
	{
		printf("\n\tAllocation Error! ");
		return NULL;
	}
	else {
		temp->left = NULL;
		temp->right = NULL;
		temp->data = var;
		return temp;
	}
	return NULL;
}

int CreateEl(Position temp, int var)
{
	if (temp->data < var)
		temp->right = CreateNode(var);
	else if (temp->data > var)
		temp->left = CreateNode(var);
	else printf("\n\tElement vec postoji!\n");
	return 0;
}

int AddEl(Position head)
{
	int var = 0;
	printf("\nUnesi element: ");
	scanf("%d", &var);
	if (head->data == 0)
	{
		printf(" \n\t nesto\n");
		head->data = var;
		return 0;
	}
	Position temp = FindElement(head, var);
	CreateEl(temp, var);
	return 0;
}

Position FindElement(Position temp, int var)
{
	if (temp->data < var && temp->right != NULL)
		temp = FindElement(temp->right, var);
	else if (temp->data > var && temp->left != NULL)
		temp = FindElement(temp->left, var);
	else return temp;
	return temp;
}

int Find(head root)
{
	int var;
	printf("\n\tUnesi trazeni clan: ");
	scanf("%d", &var);
	Position temp = FindElement(root->rootNode, var);
	if (temp->data == var) printf("\n\tClan: %d\n", var);
	else printf("\n\tClan: ne postoji!\n");
	return 0;
}

int Delete(head root)
{
	int var;
	printf("\n\tClan za brisanje: ");
	scanf("%d", &var);
	Position temp = FindElement(root->rootNode, var);
	ReconnectBranch(root->rootNode, var);
	return 0;
}

Position ReconnectBranch(Position temp, int var)
{
	if (var < temp->data) temp->left = ReconnectBranch(temp->left, var);
	else if (var > temp->data) temp->right = ReconnectBranch(temp->right, var);
	else {
		if (temp->right != NULL && temp->left != NULL) {
			Position tempNode = FindLowestNumber(temp->right);
			temp->data = tempNode->data;
			temp->right = ReconnectBranch(temp->right, temp->data);
		}
		else {
			Position tempNode = temp;
			if (temp->left == NULL) temp = temp->right;
			else temp = temp->left;
			free(tempNode);
		}
	}
	return temp;
}

Position FindLowestNumber(Position temp)
{
	if (temp->left == NULL) return temp;
	else FindLowestNumber(temp->left);
	return temp;
}

int PrintStart(head root)
{
	int input = 3;
	if (root->rootNode == NULL)
	{
		printf("\n\t\t\tStablo je prazno...\n\n");
		return 0;
	}
	printf("\n\n");
	Position current = root->rootNode;
	PrintTree(current, &input);
	printf("\n\n");
	return 0;
}

int PrintTree(Position current, int* input)
{
	int i = 0;
	if (current->right != NULL)
	{
		*input = *input + 1;
		PrintTree(current->right, input);
	}
	if (current->right == NULL && current->left != NULL) printf("\n\n");
	for (i = 0; i < *input; i++) printf("\t");
	printf("%d\n\n", current->data);
	if (current->left != NULL)
	{
		*input = *input + 1;
		PrintTree(current->left, input);
	}
	if (current->right != NULL && current->left == NULL) printf("\n\n");
	*input = *input - 1;
	return 0;
}
